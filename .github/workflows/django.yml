name: Django CI Pipeline

# Cu√°ndo ejecutar el pipeline
on:
  push:
    branches: [main, develop] # Al hacer push a main o develop
  pull_request:
    branches: [main] # Al crear pull request a main

# Variables de entorno globales
env:
  DJANGO_ENVIRONMENT: test

jobs:
  # Job de testing y validaci√≥n
  test:
    runs-on: ubuntu-latest

    # Servicios necesarios para los tests
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # 1. Descargar el c√≥digo del repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 3. Cache de dependencias para acelerar builds
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-django flake8 black isort

      # 5. Verificar formato del c√≥digo con Black
      - name: Check code formatting
        run: |
          black --check --diff .

      # 6. Verificar imports con isort
      - name: Check import sorting
        run: |
          isort --check-only --diff .

      # 7. Linting con flake8
      - name: Lint with flake8
        run: |
          # Verificar errores cr√≠ticos
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Verificar calidad general
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # 8. Ejecutar migraciones
      - name: Run migrations
        run: |
          python manage.py migrate --settings=config.settings.test

      # 9. Ejecutar tests con coverage
      - name: Run tests with coverage
        run: |
          coverage run --source='.' manage.py test --settings=config.settings.test
          coverage report
          coverage xml

      # 10. Subir reporte de coverage
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      # 11. Verificar que collectstatic funciona
      - name: Test collectstatic
        run: |
          python manage.py collectstatic --noinput --settings=config.settings.test

  # Job de deployment (solo si los tests pasan)
  deploy:
    runs-on: ubuntu-latest
    needs: test # Solo ejecuta si 'test' es exitoso
    if: github.ref == 'refs/heads/main' # Solo en la rama main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          echo "‚úÖ Deployment would happen here"
          # Aqu√≠ ir√≠an los comandos reales de deployment
          # Por ejemplo: rsync, docker push, ssh commands, etc.

      - name: Notify deployment success
        run: |
          echo "‚úÖ Deployment completed successfully!"
          # Aqu√≠ podr√≠as enviar notificaciones a Slack, Discord, etc.
